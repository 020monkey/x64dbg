int;AddMRUStringW(HANDLE hMRU,LPCTSTR szString);
int;CreateMRUListW(LPMRUINFO lpmi);
int;CreateMappedBitmap(HINSTANCE hInstance,INT_PTR idBitmap,UINT wFlags,LPCOLORMAP lpColorMap,int iNumMaps);
int;CreatePropertySheetPage(LPCPROPSHEETPAGE lppsp);
int;CreateStatusWindow(LONG style,LPCTSTR lpszText,HWND hwndParent,UINT wID);
int;CreateStatusWindowW(LONG style,LPCTSTR lpszText,HWND hwndParent,UINT wID);
int;CreateToolbarEx(HWND hWnd,DWORD ws,UINT wID,int nBitmaps,HINSTANCE hBMInst,UINT_PTR wBMID,LPCTBBUTTON lpButtons,int iNumButtons,int dxButton,int dyButton,int dxBitmap,int dyBitmap,UINT uStructSize);
int;CreateUpDownControl(DWORD dwStyle,int x,int y,int cx,int cy,HWND hParent,int nID,HINSTANCE hInst,HWND hBuddy,int nUpper,int nLower,int nPos);
int;DPA_Clone(const HDPA hdpaSource,HDPA hdpaNew);
int;DPA_Create(int cpGrow);
int;DPA_CreateEx(int cpGrow,HANDLE hheap);
int;DPA_DeleteAllPtrs(HDPA pdpa);
int;DPA_DeletePtr(HDPA pdpa,int index);
int;DPA_Destroy(HDPA pdpa);
int;DPA_DestroyCallback(HDPA pdpa,PFNDPAENUMCALLBACK pfnCB,void* pData);
int;DPA_EnumCallback(HDPA pdpa,PFNDPAENUMCALLBACK pfnCB,void* pData);
int;DPA_GetPtr(HDPA pdpa,int index);
int;DPA_GetPtrIndex(HDPA hdpa,const void* pvoid);
int;DPA_GetSize(HDPA pdpa);
int;DPA_Grow(HDPA hdpa,int cp);
int;DPA_InsertPtr(HDPA pdpa,int index,void* p);
int;DPA_LoadStream(HDPA* ppdpa,PFNDPASTREAM pfn,IStream* pstm,void* pvInstData);
int;DPA_Merge(HDPA hdpaDest,HDPA hdpaSrc,DWORD dwFlags,PFNDPACOMPARE pfnCompare,PFNDPAMERGE pfnMerge,LPARAM lParam);
int;DPA_SaveStream(HDPA pdpa,PFNDPASTREAM pfn,IStream* pstm,void* pvInstData);
int;DPA_Search(HDPA pdpa,void* pFind,int iStart,PFNDPACOMPARE pfnCmp,LPARAM lParam,UINT options);
int;DPA_SetPtr(HDPA pdpa,int index,void* p);
int;DPA_Sort(HDPA pdpa,PFNDPACOMPARE pfnCmp,LPARAM lParam);
int;DSA_Clone(HDSA hdsa);
int;DSA_Create(int cbItem,int cbItemGrow);
int;DSA_DeleteAllItems(HDSA hdsa);
int;DSA_DeleteItem(HDSA hdsa,int nPosition);
int;DSA_Destroy(HDSA pdsa);
int;DSA_DestroyCallback(HDSA pdsa,PFNDSAENUMCALLBACK pfnCB,void* pData);
int;DSA_EnumCallback(HDSA hdsa,PFNDAENUMCALLBACK* pfnCB,void* pData);
int;DSA_GetItem(HDSA pdsa,int index,void* pitem);
int;DSA_GetItemPtr(HDSA pdsa,int index);
int;DSA_GetSize(HDSA hdsa);
int;DSA_InsertItem(HDSA pdsa,int index,void* pItem);
int;DSA_SetItem(HDSA hdsa,int index,void* pItem);
int;DSA_Sort(HDSA pdsa,PFNDACOMPARE pfnCompare,LPARAM lParam);
int;DefSubclassProc(HWND hWnd,DWORD uMsg,WPARAM WPARAM,LPARAM LPARAM);
int;DestroyPropertySheetPage(HPROPSHEETPAGE hPSPage);
int;DoReaderMode(PREADERMODEINFO prmi);
int;DrawInsert(HWND handParent,HWND hLB,int nItem);
int;DrawShadowText(HDC hdc,LPCWSTR pszText,UINT cch,const RECT* pRect,DWORD dwFlags,COLORREF crText,COLORREF crShadow,int ixOffset,int iyOffset);
int;DrawStatusText(HDC hdc,LPCRECT lprc,LPCTSTR pszText,UINT uFlags);
int;DrawTextExPrivWrap(HDC hdc,LPTSTR lpchText,int cchText,LPRECT lprc,UINT dwDTFormat,LPDRAWTEXTPARAMS lpDTParams);
int;DrawTextWrap(HDC hdc,LPCTSTR lpString,int nCount,LPRECT lpRect,UINT uFormat,LPDRAWTEXTPARAMS lpDTParams);
int;EnumMRUListW(HANDLE hMRU,int nItem,void* lpData,UINT uLen);
int;ExtTextOutWrap(HDC hdc,int X,int Y,UINT uOptions,const RECT* lprc,LPCTSTR lpString,UINT cbCount,const INT* lpDx);
int;FlatSB_EnableScrollBar(HWND hwnd,int wSBflags,UINT wArrows);
int;FlatSB_GetScrollInfo(HWND hwnd,DWORD fnBar,LPSCROLLINFO lpsi);
int;FlatSB_GetScrollPos(HWND hwnd,DWORD code);
int;FlatSB_GetScrollProp(HWND hwnd,DWORD index,LPINT pValue);
int;FlatSB_GetScrollPropPtr(HWND hwnd,DWORD index,LPINT pValue);
int;FlatSB_GetScrollRange(HWND hwnd,int code,LPINT lpMinPos,LPINT lpMaxPos);
int;FlatSB_SetScrollInfo(HWND arg1);
int;FlatSB_SetScrollPos(HWND hwnd,int code,int nPos,BOOL fRedraw);
int;FlatSB_SetScrollProp(HWND hWnd,DWORD arg2,INT_PTR arg3,BOOL arg4);
int;FlatSB_SetScrollRange(HWND hwnd,int code,int nMinPos,int nMaxPos,BOOL fRedraw);
int;FlatSB_ShowScrollBar(HWND hwnd,int code,BOOL fShow);
int;FreeMRUList(HANDLE hMRU);
int;GetEffectiveClientRect(HWND hWnd,LPRECT lprc,const INT* lpInfo);
int;GetMUILanguage();
int;GetTextExtentPoint32Wrap(HDC hdc,LPCTSTR lpString,UINT cbCount,LPSIZE lpSize);
int;GetWindowSubclass(HWND hWnd,SUBCLASSPROC pfnSubclass,UINT_PTR uIdSubclass,DWORD_PTR* pdwRefData);
int;HIMAGELIST_QueryInterface(HIMAGELIST himl,REFIID riid,void** ppv);
int;ImageList_Add(HIMAGELIST hIml,HBITMAP hImageBmp,HBITMAP hMaskBmp);
int;ImageList_AddMasked(HIMAGELIST hImageList,HBITMAP hObject,COLORREF clrMask);
int;ImageList_BeginDrag(HIMAGELIST himlTrack,int iTrack,int dxHotspot,int dyHotspot);
int;ImageList_CoCreateInstance(REFCLSID rclsid,const IUnknown* punkOuter,REFIID riid,void** ppv);
int;ImageList_Copy;HIMAGELIST himlDst;int iDst;HIMAGELIST himlSrc;int iSrc;UINT uFlags;
int;ImageList_Create;int Width;int Height;DWORD Type;int nInital;int nGraw;
int;ImageList_Destroy;HIMAGELIST hIml;
int;ImageList_DragEnter;HWND hwndLock;int x;int y;
int;ImageList_DragLeave;HWND hwndLock;
int;ImageList_DragMove;int x;int y;
int;ImageList_DragShowNolock;BOOL fShow;
int;ImageList_Draw;HIMAGELIST hIml;int Index;HDC hDC;int X;int Y;DWORD Style;
int;ImageList_DrawEx;HIMAGELIST hIml;int Index;HDC hDC;int X;int Y;int Width;int Height;COLORREF BkColor;COLORREF FgColor;DWORD Style;
int;ImageList_DrawIndirect;IMAGELISTDRAWPARAMS* pimldp;
int;ImageList_Duplicate;HIMAGELIST himl;
int;ImageList_EndDrag;;
int;ImageList_GetBkColor;HIMAGELIST himl;
int;ImageList_GetDragImage;POINT* ppt;POINT* pptHotspot;
int;ImageList_GetIcon;HIMAGELIST himl;int i;DWORD flags;
int;ImageList_GetIconSize;HIMAGELIST hImageList;int* cx;int* cy;
int;ImageList_GetImageCount;HIMAGELIST himl;
int;ImageList_GetImageInfo;HIMAGELIST himl;int i;IMAGEINFO* pImageInfo;
int;ImageList_LoadImage;HINSTANCE hInstance;LPCTSTR lpStrbmp;int cx;int cGrow;COLORREF crMask;DWORD uType;DWORD uFlags;
int;ImageList_LoadImageW;HINSTANCE hInstance;LPCTSTR lpStrbmp;int cx;int cGrow;COLORREF crMask;DWORD uType;DWORD uFlags;
int;ImageList_Merge;HIMAGELIST himl1;int i1;HIMAGELIST himl2;int i2;int dx;int dy;
int;ImageList_Read;LPSTREAM pstm;
int;ImageList_ReadEx;DWORD dwFlags;LPSTREAM pstm;REFIID riid;void** ppv;
int;ImageList_Remove;HIMAGELIST hIml;int Index;
int;ImageList_Replace;HIMAGELIST hIml;int Index;HBITMAP hImageBmp;HBITMAP hMaskBmp;
int;ImageList_ReplaceIcon;HIMAGELIST hImageList;int itype;HICON hicon;
int;ImageList_SetBkColor;HIMAGELIST himl;COLORREF clrBk;
int;ImageList_SetColorTable;HIMAGELIST himl;int start;int len;RGBQUAD* prgb;
int;ImageList_SetDragCursorImage;HIMAGELIST himlDrag;int iDrag;int dxHotspot;int dyHotspot;
int;ImageList_SetIconSize;HIMAGELIST himl;int cx;int cy;
int;ImageList_SetImageCount;HIMAGELIST himl;UINT uNewCount;
int;ImageList_SetOverlayImage;HIMAGELIST himl;int iImage;int iOverlay;
int;ImageList_Write;HIMAGELIST himl;LPSTREAM pstm;
int;ImageList_WriteEx;HIMAGELIST himl;DWORD dwFlags;LPSTREAM pstm;
int;InitCommonControls;;
int;InitCommonControlsEx;const LPINITCOMMONCONTROLSEX lpInitCtrls;
int;InitMUILanguage;LANGID uiLang;
int;InitializeFlatSB;HWND hWnd;
int;LBItemFromPt;HWND hLB;POINT pt;BOOL bAutoScroll;
int;LoadIconMetric;HINSTANCE hinst;PCWSTR pszName;int lims;HICON* phico;
int;LoadIconWithScaleDown;HINSTANCE hinst;PCWSTR pszName;int cx;int cy;HICON* phico;
int;MakeDragList;HWND hLB;
int;MenuHelp;DWORD uMsg;WPARAM wParam;LPARAM lParam;HMENU hMainMenu;HINSTANCE hInst;HWND hwndStatus;LPUINT lpwIDs;
int;MirrorIcon;HICON* phIconSmall;HICON* phIconLarge;
int;PropertySheet;LPCPROPSHEETHEADER lppsph;
int;RemoveWindowSubclass;HWND hWnd;SUBCLASSPROC pfnSubclass;UINT_PTR uIdSubclass;
int;SetWindowSubclass;HWND hWnd;SUBCLASSPROC pfnSubclass;UINT_PTR uIdSubclass;DWORD_PTR dwRefData;
int;ShowHideMenuCtl;HWND hWnd;UINT_PTR uFlags;LPINT lpInfo;
int;Str_GetPtr;LPCTSTR pszSource;LPCSTR pszDest;int cchDest;
int;Str_SetPtr;LPTSTR* ppszCurrent;LPCTSTR pszNew;
int;TaskDialog;HWND hWndParent;HINSTANCE hInstance;PCWSTR pszWindowTitle;PCWSTR pszMainInstruction;PCWSTR pszContent;TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons;PCWSTR pszIcon;int* pnButton;
int;TaskDialogIndirect;const TASKDIALOGCONFIG* pTaskConfig;int* pnButton;int* pnRadioButton;BOOL* pfVerificationFlagChecked;
int;UninitializeFlatSB;HWND hwnd;
int;_TrackMouseEvent;LPTRACKMOUSEEVENT pTrackMouseEvent;